#!/bin/bash
set -e

ACTION=$1
SERVER=$2
SOURCE=$(dirname $(readlink -f $0))


# Verify first parameter exists (action)
if [ -f $ACTION ]
then
  echo "First parameter required (list|benchmark|build|start|info|stop|clean)"
  exit
fi

# Run actions that don't require server parameter
case $ACTION in
  "list")
    echo "List of servers:"
    cd $SOURCE/servers
    for d in $(ls -dR */**); do echo $d; done
    exit;;

  "benchmark")
    echo "Running benchmark"

    docker run --rm --net="host" \
      williamyeh/wrk \
      -t1 -c11 -d11s --timeout 1s \
      http://127.0.0.1:8888/api/echo/HelloWorld?num=1234567890
    exit;;

  "test")
    echo "Running test"

    HAPPY_TEST=$(curl localhost:8888/api/echo/HelloWorld?num=1234567890)
    if [[ $HAPPY_TEST == "{\"message\":"* ]]
    then
      printf "HappyTest-PASS, "
    else
      printf "HappyTest-FAIL, "
      printf "$HAPPY_TEST, "
    fi

    ERROR_TEST=$(curl localhost:8888/api/echo/AlohaWorld?num=321)
    if [[ $ERROR_TEST == "{\"error\":"*"\"Invalid parameters\"}" ]]

    then
      printf "ErrorTest-PASS\n"
    else
      printf "ErrorTest-FAIL, "
      printf "$ERROR_TEST\n"
    fi

    exit;;

esac

# Verify second parameter exists (server/directory)
if [ -f $SERVER ]
then
  echo "Second parameter required (ex: go/go)"
  exit
fi

# cd to server directory
cd $SOURCE/servers/$SERVER

# Docker image name
SUFFIX=${SERVER//\//-} # Convert / to -
NAME=httpbench-$SUFFIX

# Run server action
case $ACTION in
  "build")
    echo "Building $NAME"
    docker build --rm --pull -t $NAME .
    ;;
  "start")
    echo "Starting server $NAME"
    docker run -dt --rm --name=$NAME -p 8888:8888 $NAME
    ;;
  "start-int")
    echo "Starting interactive shell $NAME"
    docker run -it --rm --name=$NAME -p 8888:8888 $NAME
    ;;
  "start-dev")
    echo "Starting developer shell $NAME"
    docker run -it --rm --name=$NAME -p 8888:8888 -v ${PWD}:/app $NAME sh
    ;;
  "info")
    echo "Getting info for $NAME"
    docker run -it --rm $NAME sh info
    ;;
  "stop")
    echo "Stopping container $NAME"
    docker kill $NAME || docker rm --force $NAME
    ;;
  "clean")
    echo "Deleting image $NAME"
    docker rmi --force $NAME
    ;;
esac
